import os
import subprocess
import shutil
import pysam
from os.path import join

configfile: config["cfp"]     
maegatk_directory = config["maegatk_directory"]
name = config["name"]          

# A Snakemake regular expression matching the bam file paths
SAMPLES, = glob_wildcards(join(maegatk_directory, "temp/ready_bam/{sample}.qc.bam"))

rule all:
	input:
		maegatk_directory + "/final/" + name + ".depthTable.txt",
		maegatk_directory + "/final/" + name + ".A.txt.gz",
		maegatk_directory + "/final/" + name + ".C.txt.gz",
		maegatk_directory + "/final/" + name + ".G.txt.gz",
		maegatk_directory + "/final/" + name + ".T.txt.gz",	
		maegatk_directory + "/final/" + name + ".coverage.txt.gz",

rule make_depth_table:
	input:
		depths = expand(maegatk_directory + "/qc/depth/{sample}.depth.txt", sample=SAMPLES)
	output:
		depthtable = maegatk_directory + "/final/" + name + ".depthTable.txt"
	run: 
		with open(output.depthtable, 'w') as f:
			for file in input.depths:
				os.system("cat " + file + " >> " + output.depthtable)

rule make_final_sparse_matrices:
	input:
		As = expand(maegatk_directory + "/temp/sparse_matrices/{sample}.A.txt", sample=SAMPLES),
		Cs = expand(maegatk_directory + "/temp/sparse_matrices/{sample}.C.txt", sample=SAMPLES),
		Gs = expand(maegatk_directory + "/temp/sparse_matrices/{sample}.G.txt", sample=SAMPLES),
		Ts = expand(maegatk_directory + "/temp/sparse_matrices/{sample}.T.txt", sample=SAMPLES),
		Covs = expand(maegatk_directory + "/temp/sparse_matrices/{sample}.coverage.txt", sample=SAMPLES)
		
	output:
		A = maegatk_directory + "/final/" + name + ".A.txt.gz",
		C = maegatk_directory + "/final/" + name + ".C.txt.gz",
		G = maegatk_directory + "/final/" + name + ".G.txt.gz",
		T = maegatk_directory + "/final/" + name + ".T.txt.gz",
		Cov = maegatk_directory + "/final/" + name + ".coverage.txt.gz"
		
	run: 
		def makeSM(iterableThing, l):
			for i in iterableThing:
				os.system("cat " + i + " >> " + maegatk_directory + "/final/" + name + "."+l+".txt")
			os.system("gzip " + maegatk_directory + "/final/" + name + "."+l+".txt")
			
		makeSM(input.As, "A")
		makeSM(input.Cs, "C")
		makeSM(input.Gs, "G")
		makeSM(input.Ts, "T")
		makeSM(input.Covs, "coverage")

